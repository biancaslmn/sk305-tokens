// Material Design Palette Sketch Styles Generation
// Using Puzzle Tokens Sketch plugin and SASS
// version 1.0.1 by Marcelo Paiva (gh: mpaiva) and Juan Alvarado (gh: jalvarado91)


// Required SASS modules:
@use "sass:map";     // access values in arrays
@use "sass:color";   // color manipulation

// Dependencies:
@import "../../styles/helpers/constants";
@import "../../styles/helpers/functions";
@import "../../styles/helpers/mixins";
@import "../../styles/helpers/tokens";


//// Base colors

$colors: (
    primary:             $sk305-primary,
    secondary:           $sk305-secondary,
    dark:                $sk305-surface-darker,
    light:               $sk305-surface-light,
    danger:              $sk305-danger,
    warning:             $sk305-warning,
    success:             $sk305-success
);

// Fonts

$font-size: (
    display-lg:         rem-to-px($sk305-text-size-9),
    display-md:         rem-to-px($sk305-text-size-8),
    display-sm:         rem-to-px($sk305-text-size-7),
    display-xs:         rem-to-px($sk305-text-size-5),

    heading-1:          rem-to-px($sk305-text-size-6),
    heading-2:          rem-to-px($sk305-text-size-5),
    heading-3:          rem-to-px($sk305-text-size-4),
    heading-4:          rem-to-px($sk305-text-size-3),

    body:               rem-to-px($sk305-text-size-2),
    small:              rem-to-px($sk305-text-size-1),

    label-lg:           rem-to-px($sk305-text-size-4),
    label-md:           rem-to-px($sk305-text-size-3),
    label-sm:           rem-to-px($sk305-text-size-2),
    label-xs:           rem-to-px($sk305-text-size-1),

);

$text-align: left, right, center;

$module: 4px;

// Shadows

$shadow: (
    enormous:   0 $module*8 $module*32 fade-out(map.get($colors, Black), .7),
    large:      0 $module*4 $module*8 fade-out(map.get($colors, Black), .8),
    medium:     0 $module $module*2 fade-out(map.get($colors, Black), .9),
    small:      0 $module/2 $module/4 fade-out(map.get($colors, Black), .95)
);


// Backgrounds

.Backgrounds {
    // base color styles generation
    @each $key, $value in $colors {
        .#{$key} {
            background-color: $value;
        }
    }

    // shades generation
    .Neutrals {
        @for $index from 1 through 7 {
            .Neutral-#{$index} {
                background-color: tint(map.get($colors, Black), 45% + ($index)*50%/7);
            }
        }
    }

    // Stage background
    .Stage {
        background-color: tint(map.get($colors, Black), 98%);
    }
}

// Elevated backgrounds w/Shadow

.Backgrounds .Elevated {
    @each $key, $value in $colors {
    .#{$key} {
        background-color: $value;
        box-shadow: map.get($shadow, large);
    }
    }
    // shades generation
    .Neutrals {
        @for $index from 1 through 7 {
            .Neutral-#{$index} {
                background-color: tint(map.get($colors, Black), 45% + ($index)*50%/7);
                box-shadow: map.get($shadow, large);
            }
        }
    }
}


// Texts generation: Size/Alignment/Color

@each $ks,$vs in $font-size {

    .#{$ks}Size {
        @each $va in $text-align {
            $ia: index(($text-align), ($va));
            .#{$va}Aligned {
                @each $key, $value in $colors {
                    .#{$key} {
                        color: $value;
                        font-size: $vs;
                        font-family: "Open Sans";
                        text-align: $va;
                        vertical-align: middle;
                        line-height: 1.25;
                    }
                }

                // Contrast text colors subset generation
                .ContrastTo {
                    //Base colors
                    @each $key, $value in $colors {
                        .#{$key} {
                            color: contrast($value); // getting a color contrast to a given color
                            font-size: $vs;
                            text-align: $va;
                            vertical-align: middle;
                            line-height: 1.25;
                        }
                    }
                    //Neutral colors
                    @for $index from 1 through 7 {
                        .Neutral-#{$index} {
                            color: contrast(tint(map.get($colors, Black), 45% + ($index)*50%/7));
                            font-size: $vs;
                            text-align: $va;
                            vertical-align: middle;
                            line-height: 1.25;
                        }
                    }
                }
            }
        }
    }
}


// Gradient Backgrounds

.Gradients {
    .Brand-Primary {
        background-color: linear-gradient(45deg, map.get($colors, Brand), map.get($colors, Primary));
    }
    .Brand-Secondary {
        background-color: linear-gradient(45deg, map.get($colors, Brand), map.get($colors, Secondary));
    }
    .Brand-Highlight {
        background-color: linear-gradient(45deg, map.get($colors, Brand), map.get($colors, Highlight));
    }
}

// Shadows Backgrounds

.Shadows .Primary {
    @each $key, $value in $shadow {
        .#{$key}Size {
            background-color: map.get($colors, White);
            box-shadow: $value;
        }
        .Inner {
            .#{$key}Size {
                background-color: map.get($colors, White);
                box-shadow: inset $value;
            }
        }
    }

}


//// Symbols styles

#Buttons {
    #PrimarySmall .Back {
        border-radius: $module;
    }
    #PrimaryMedium .Back {
        border-radius: $module*2;
    }
    #PrimaryLarge .Back {
        border-radius: $module*4;
    }
}

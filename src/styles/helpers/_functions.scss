@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@function rem($px) {
    @return ($px / 16) +rem; 
}


// //convert rem back to px

@function rem-to-px($size) {
	$value: parseInt($size) * 16px; //15px is the base size specified
	@return round($value);
}

// //// Custom functions to get parity with Less functions

// @function tint($color, $value) {
//     @return mix(#ffffff, $color, $value);
// }


// /**
//  * Calculate the luminance for a color.
//  * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//  */
//  @function luminance($color) {
//     $red: nth($channel-values, red($color) + 1);
//     $green: nth($channel-values, green($color) + 1);
//     $blue: nth($channel-values, blue($color) + 1);

//     @return .2126 * $red + .7152 * $green + .0722 * $blue;
// }

// /**
// * Calculate the contrast ratio between two colors.
// * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
// */
// @function return-contrast-color($back, $front) {
//     $backLum: luminance($back) + .05;
//     $foreLum: luminance($front) + .05;

//     @return max($backLum, $foreLum) / min($backLum, $foreLum);
// }

// /**
// * Determine whether to use dark or light text on top of given color.
// * Returns black for dark text and white for light text.
// */

// @function contrast($color) {
//     $lightContrast: return-contrast-color($color, white);
//     $darkContrast: return-contrast-color($color, black);

//     @if ($lightContrast > $darkContrast) {
//         @return white;
//     }
//     @else {
//         @return black;
//     }
// }